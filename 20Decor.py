# """ Передача функции в функции в виде аргумента"""
# def hello():
#     return "Привет, я функция 'Привет'"
#
# def super_finc(func):
#     print("Привет, я функция 'СуперФ'")
#     print(func())
#
# super_finc(hello)  # после внутренней функции скобки не нужны
# # Привет, я функция 'СуперФ'
# # Привет, я функция 'Привет'

# '''приваиваем переменной функцию '''
# def hello():
#      return "Привет, я функция 'Привет'"
# test = hello  # приваиваем переменной функцию, без скобок (обьект)
# print(test())  # Привет, я функция 'Привет'

# '''Декорирование, функцию вставляем в функцию оберткии с использованием декоратора @ '''
# def my_decor(fucn):
#     def func_wrapper():
#         print("Код до")
#         fucn()  # Вызываем то что прилетит в функцию my_decor
#         print("Код после")
#     return func_wrapper # Без скобор, без выполения, нам нужно вернуть результат этого декоратора
#
# @my_decor # имя такоеже как у обертки, если закоментировать то получим только эту функцию
# def func_go():  # какая то вторая фенкция
#     print("Привет, я функция 'Go'")
#
# # ''' что б избавится от этого что ниже, можно использщовать декоратор '''
# # go = my_decor(func_go) # Декорирование, функцию(без скобок) вставляем в функцию обертки и присваиваем в переменную
# # go() # запускаем, для запуска только тут стваим скобки
#
# func_go() # если есть декоратор, то запускаме функцию того что хочем обернуть
''' Привем использования декоратора,
данный декротор получает текст,
приводим 1 букву к верхнему регистру
и удаляет запятые  '''

''' функция декротора, которая что то принимает , обрабатывает и возвашает, без выполнения'''
def make_title(fn):
    def wrapper():
        title = fn() # в функцию что то прилетает и это то что то засоваваем в переменную
        title = title.capitalize()  # берем переменную и приводим 1 букву к верхнему регистру и запихиваем в перемен.
        title = title.replace(",","") # берем переменную и удаем все запятые
        return title # возвращаем переменную , результат
    return wrapper # декоратор возващает декорирующую функцию

''' Функция, которая полетит в функцию декротора'''
#@make_title
def hi():
    return "привет, всем,!"

''' без декоратора @make_title то надо присваиваьт переменную'''
otvet = make_title(hi)
print(otvet()) # Привет всем!

''' С декоратором @make_title , не надо присваивать переменной функцию'''
print(hi()) # Привет всем! , если закоменить декор. @make_title ответ: привет, всем,!


